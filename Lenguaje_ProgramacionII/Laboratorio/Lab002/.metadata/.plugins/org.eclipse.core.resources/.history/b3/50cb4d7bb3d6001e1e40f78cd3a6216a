package movil;

public abstract class Movil {
	protected double espacio;
	protected double tiempo;
	protected double distancia;
	protected double velocidad;
	protected double aceleracion;
	
	public Movil(double espacio, double tiempo){
		this.espacio = espacio;
		this.tiempo = tiempo;
	}
	
	public abstract void calcularVelocidadFinal();

	public String toString() {
		return "Movimiento: " + this.getClass().getSimpleName() +"/nEspacio: " + espacio + "/nTiempo: " + tiempo + "/nDistancia: " + distancia + "/nVelocidad: " + velocidad + "/nAceleracion: " + aceleracion;
	}
}

public class Libre extends Movil{
	public Libre(double espacio, double tiempo) {
		super(espacio, tiempo);
	}
	
	@Override
	public void calcularVelocidadFinal() {
		this.velocidad = this.espacio / this.tiempo;
		this.aceleracion = 0;
	}
}

public class Retardo extends Movil{
	private double retardo;
	
	public Retardo(double espacio, double tiempo, double retardo) {
		super(espacio, tiempo);
		this.retardo = retardo;
	}
	
	@Override
	public void calcularVelocidadFinal() {
		this.velocidad = (this.espacio -(this.retardo * this.tiempo)) / this.tiempo;
		this.aceleracion = this.retardo;
	}
}

public class MovilTest{
	public void testMovil() {
		Movil movil1 = new Libre(10,2);
		movil1.calcularVelocidadFinal();
		assertEquals("Movimiento : Libre/nEspacio: 10.0/nTiempo: 2.0/nDistancia: 10.0/nVelocidad: 5.0/nAceleracion: 0.0", movil1.toString());
		
		Movil movil2 = new Retardo(10, 2, 3);
		movil2.calcularVelocidadFinal();
		assertEquals("Movimiento : Libre/nEspacio: 10.0/nTiempo: 2.0/nDistancia: 7.0/nVelocidad: 2.857142857142857/nAceleracion: 3.0", movil2.toString());
	}
}